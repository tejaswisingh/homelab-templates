volumes:
  postgres_data:
  data:
  temp:

networks:
  kestra_network:
    driver: bridge

services:
  postgres:
    image: postgres
    container_name: kestra_postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 10
    networks:
      - kestra_network

  kestra:
    image: kestra/kestra:latest
    container_name: kestra
    pull_policy: always
    # Note that this setup with a root user is intended for development purpose.
    # Our base image runs without root, but the Docker Compose implementation needs root to access the Docker socket
    # To run Kestra in a rootless mode in production, see: https://kestra.io/docs/installation/podman-compose
    user: "root"
    command: server standalone
    volumes:
      - data:/app/storage
      - /var/run/docker.sock:/var/run/docker.sock
      - temp:/tmp/kestra-wd
    environment:
      KESTRA_CONFIGURATION: |
        datasources:
          postgres:
            url: jdbc:postgresql://postgres:5432/kestra
            driverClassName: org.postgresql.Driver
            username: "${POSTGRES_USER}"
            password: "${POSTGRES_PASSWORD}"
        kestra:
          server:
            basic-auth:
              enabled: true
              username: "${KESTRA_SERVER_EMAIL}" # it must be a valid email address
              password: "${KESTRA_SERVER_PASSWORD}"
          repository:
            type: postgres
          storage:
            type: local
            local:
              base-path: "/app/storage"
          queue:
            type: postgres
          tasks:
            tmp-dir:
              path: /tmp/kestra-wd/tmp
          url: http://localhost:8080/
    ports:
      - 9080:8080
      - 9081:8081
    networks:
      - kestra_network
    depends_on:
      postgres:
        condition: service_started